#!/bin/bash
WHICH_PYTHON=$(which python > /dev/null 2>&1)
if [ $? == 1 ]; then echo "Python was not detected. Exiting."; exit 1; fi;

# Check if insights-core is already installed
INSIGHTS_CLIENT_INSTALLED=0
WHICH_INSIGHTS_CLIENT=$(which insights-core > /dev/null 2>&1)
if [ $? == 0 ]; then INSIGHTS_CLIENT_INSTALLED=1; fi;

# Check if we can actually install the egg or need to run it im /tmp
CANINSTALLEGG=0
WHICH_EASY_INSTALL=$(which easy_install > /dev/null 2>&1)
if [ $? == 0 ]; then CANINSTALLEGG=1; fi;

# Setup flags & placeholders
OPTIND=1
DEVMODE=0
USEGIT=0
NOGPG=0
VERBOSE=0
DONTBUILD=0
SHOWHELP=0
SHOWVERSION=0
ARGS=$@
USEINSTALLEDCORE=0
DONTCHECKVERSION=0
DONTCLEANUP=0
for arg in "$@"; do
  shift
  case "$arg" in
    "--help") set -- "$@" "-h" ;;
    "--version") set -- "$@" "-v" ;;
	"--devmode") set -- "$@" "-d" ;;
	"--usegit") set -- "$@" "-g" ;;
	"--nogpg") set -- "$@" "-G" ;;
	"--verbose") set -- "$@" "-V" ;;
	"--dontbuild") set -- "$@" "-b" ;;
	"--useinstalledcore") set -- "$@" "-u" ;;
	"--dontcheckversion") set -- "$@" "-U" ;;
	"--dontcleanup") set -- "$@" -"-c" ;;
	"--returnjson") set -- "$@" - "-j" ;;
	"--returnarchive") set -- "$@" - "-z" ;;
	"--useansible") set -- "$@" - "-a" ;;
	"--dontuseansible") set -- "$@" - "-A" ;;
	"--inventory") set -- "$@" - "-i" ;;
    *)        set -- "$@" "$arg"
  esac
done
while getopts "hvdgGVbuUcjz:i" opt > /dev/null 2>&1; do
	case "$opt" in
	h) SHOWHELP=1 ;;
	v) SHOWVERSION=1 ;;
	d) DEVMODE=1 ;;
	g) USEGIT=1 ;;
	G) NOGPG=1 ;;
	V) VERBOSE=1 ;;
	b) DONTBUILD=1 ;;
	u) USEINSTALLEDCORE=1;;
	U) DONTCHECKVERSION=1;;
	c) DONTCLEANUP=1;;
	esac
done
shift $((OPTIND-1))
[ "$1" = "--" ] && shift


# Define the help function
# -h flag
function show_help {
	if [ $INSIGHTS_CLIENT_INSTALLED == 1 ]; then
		# Run whatever help mode is already installed
		if [ $DEVMODE == 0 ] && [ $DONTBUILD == 0 ]; then
			insights-core --help
			exit 0;
		fi
	else
		# These are default help options that will need to be updated as the actual client help options are updated
		# This gives the illusion that the package is actually installed...
		echo "Usage: insights-client [options]"
		echo ""
		echo "Options:"
		echo -e "-h | --help\t HALP!"
		echo -e "-v | --version\t Get the version."
		echo -e "-V | --verbose\t Verbose output."
		echo -e "-d | --devmode\t Run in development mode, this uses the local core source instead of reaching out to the mothership."
		echo -e "-g | --usegit\t Retrieve the Core from the Git repo https://github.com/RedHatInsights/insights-client instead of Red Hat mothership."
		echo -e "-G | --nogpg\t Run with no GPG verficiation."
		echo -e "-b | --dontbuild\t Don't build a new core."
		echo -e "-u | --useinstalledcore\t Use whatever insights-core package is already installed."
		exit 0;
	fi
}

# Define the version function
# -v flag
function show_version {
	if [ $INSIGHTS_CLIENT_INSTALLED == 1 ]; then
		# Run whatever version output is already installed
		if [ $DEVMODE == 0 ] && [ $DONTBUILD == 0 ]; then
			insights-core --version
			exit 0;
		fi
	else
		echo "Insights Client Version X.X.X"
		exit 0;
	fi
}

# Define the verbose output
# -V  flag
function verbose_output {
	if [ $VERBOSE == 1 ]; then echo $1; fi;
}

# Define the function that checks what version we're running
NEEDTOUPDATE=0
VERSION_CURL_URL="https://cert-api.access.redhat.com/r/insights/static/insights-core.version"
TMP_DIR=$(mktemp -d)
TMP_VERSION_LOC=$TMP_DIR"/insights-core.version"
function check_version { 
	if [ $USEGIT == 1 ]; then NEEDTOUPDATE=1; return; fi
	if [ $DONTCHECKVERSION == 1 ]; then
		verbose_output "Bypassing version check: --dontcheckversion was flagged."
		return
	fi
	if [ $DEVMODE == 0 ] && [ $USEINSTALLEDCORE == 0 ] && [ $DONTBUILD == 0 ]; then
		CURRENT_VERSION=0
		if [ $INSIGHTS_CLIENT_INSTALLED == 1 ]; then
			CURRENT_VERSION=$(insights-core --version)
		fi
		VERSION_CURL=$(curl --insecure --write-out %{http_code} --silent --output $TMP_VERSION_LOC $VERSION_CURL_URL)
		if [ $VERSION_CURL == 200 ]; then
			CURRENT_VERSION_STDOUT=$(cat $TMP_VERSION_LOC)	
			if [ $VERSION_CURL_STDOUT > $CURRENT_VERSION ]; then NEEDTOUPDATE=1; fi;
		else
			verbose_output "There was an issue checking for new version"
			USEINSTALLEDCORE=1
		fi
	else
		verbose_output "Bypassing version check: --devmode, --useinstalledcore, or --dontbuild were flagged."
	fi
}


# Define the download function for the client egg
# 1) Not bypassed via devmode through -d flag
EGG_URL="https://cert-api.access.redhat.com/r/insights/static/insights-core.egg"
TMP_EGG_LOC=$TMP_DIR"/insights-client.egg"
function download_client_core {
	if [ $USEGIT == 1 ]; then
		EGG_URL="https://raw.githubusercontent.com/RedHatInsights/insights-client/master/insights-core.egg"
	fi
	if [ $DEVMODE == 1 ]; then
		verbose_output "Not retrieving new Core, running in development mode"
	elif [ $USEINSTALLEDCORE == 1 ]; then
		verbose_output "Not building or retrieving new Core, using installed Core"
	else
		verbose_output "Obtaining Insights Client"

		EGG_CURL=$(curl --insecure --write-out %{http_code} --silent --output $TMP_EGG_LOC $EGG_URL)
		verbose_output "Client retrieval response "$EGG_CURL""
		if [ $EGG_CURL != 200 ]; then verbose_output "Core retrieval failed"; exit 1; fi;
		if [ $EGG_CURL == 200 ]; then verbose_output "Core retrieval success"; fi;
	fi

	# If we are running in development mode, build the new egg from local
	if [ $DEVMODE == 1 ] && [ $DONTBUILD == 0 ]; then
		verbose_output "Running in development mode, building core from local source"
		python setup.py bdist_egg > /dev/null 2>&1
	elif [ $USEINSTALLEDCORE  == 1 ]; then
		verbose_output "Not building new Core, using installed Core"
	elif [ $DONTBUILD == 1 ]; then
		verbose_output "Not building new Core, don't build flag set"
	fi
}

# Define the function to verify the egg
EGG_VERIFICATION=0
function verify_core {
	if [ $USEINSTALLEDCORE == 1 ]; then NOGPG=1; fi;
	if [ $USEGIT == 1 ]; then NOGPG=1; fi;
	if [ $NOGPG == 0 ]; then
		verbose_output "Verifying core"
		GPG_KEY="/etc/insights-client/redhat.gpg"
		EGG_LOCATION=$TMP_EGG_LOC
		if [ $DEVMODE == 1 ]; then 
			GPG_KEY="etc/redhat-dev.gpg";
			EGG_LOCATION="dist/*.egg";
		fi;
		gpg --verify $GPG_KEY $EGG_LOCATION > /dev/null 2>&1
		EGG_VERIFICATION=$?
		# Bail if it doesn't check out
		if [ $EGG_VERIFICATION != 0 ]; then
			verbose_output "Core verification failed";
			exit 1;
		else
			verbose_output "Core verification passed";
		fi
	else
		verbose_output "Core verification bypassed"
	fi
}

# Define the function run the egg and/or install the egg
# Depending on flags
# The egg will check out if:
# 1) GPG is verified
# 2) GPG is bypassed
function run_core {
	if [ $EGG_VERIFICATION == 0 ]; then
		if [ $DEVMODE == 1 ]; then
			verbose_output "Running development core"
			python dist/*.egg $ARGS
		elif [ $USEINSTALLEDCORE == 1 ]; then
			verbose_output "Running locally installed core"
			insights-core $ARGS
		elif [ $CANINSTALLEGG == 1 ]; then
			verbose_output "Installing new core"
			easy_install $TMP_EGG_LOC > /dev/null 2>&1
			if [ $? == 1 ]; then verbose_output "There was an issue installing the new core"; exit 1; fi;
			verbose_output "Running new core"
			insights-core $ARGS
		else
			verbose_output "Running core directly"
			python $TMP_EGG_LOC $ARGS
		fi
	fi
}

# Clean up after ourselves
function clean_up {
	if [ $DONTCLEANUP == 0 ]; then
		verbose_output "Cleaning up"
		rm -rf $TMP_DIR > /dev/null 2>&1
	else
		verbose_output "Cleanup bypassed, not cleaning up"
	fi
}

if [ $SHOWHELP == 1 ]; then show_help; fi
if [ $SHOWVERSION == 1 ]; then show_version; fi

# Verbose stuff
function do_the_things {
	# Only update the client if the version is behind
	check_version

	# Download the new Client Core if:
	download_client_core

	# Verify the core if not bypassed via -G flag
	verify_core

	# Hatch the core if it checks out
	run_core

	# Clean up time
	clean_up
}

# Main execution procedure
verbose_output "Running Insights Client"
do_the_things